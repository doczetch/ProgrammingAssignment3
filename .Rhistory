dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
str(Data)
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
head(Data$activity,30)
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
library(knitr)
knit2html("codebook.Rmd");
install.packages("knitr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(knitr)
knit2html("codebook.Rmd");
knit2html("codebook.Rmd")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
unzip(zipfile="./data/Dataset.zip",exdir="./data")
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
str(Data)
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
head(Data$activity,30)
install.packages("dplyr")
library(dplyr)
library(swirl)
swirl()
install.packages("yaml", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
swirl
swirl()
library(swirl)
swirl()
yaml
yaml.load
dplyr
library(dplyr)
library(swirl)
swirl()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran)
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean())
summarize(by_package, mean(size))
count = n()
pack_sum <- summarize(by_package, count = n(),  unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
tbl, pack_sum
tbl()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =
| 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
submit()
cran %>%
select() %>%
print
submit()
reset()
swirl()
cran %>%
select() %>%
print
submit()
submit
function ()
{
invisible()
}
<environment: namespace:swirl>
submit()
select(ip_id, country, package, size)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit
function ()
{
invisible()
}
<environment: namespace:swirl>
cran %>%
select(ip_id, country, package, size) %>%
print()
submit()
View(result3)
submit()
library(dplyr)
library("dplyr")
library(swirl)
swirl()
submit()
submit()
submit()
submit()
reset()
swirl()
list()
list.files()
rm(object.size())
rm(by_package)
rm(cran)
rm(cran2)
rm(cran3)
rm(DT)
rm(fileUrl)
rm(fileURL)
rm(housing)
rm(mydf)
rm(pack_sum)
rm(path2csv)
rm(result1)
rm(result2)
rm(result3)
rm(top_countries)
library("dplyr")
library(swirl)
swirl()
submit()
cran %>%
select(cran, ip_id, package, country) %>%
print()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb)) %>%
print
submit()
cran %>%
group_by(package) %>%
summarize(count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
) %>%
filter(countries > 60) %>%
arrange(desc(countries), avg_bytes) print()
cran %>%
group_by(package) %>%
summarize(count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
) %>%
filter(countries > 60) %>%
arrange(desc(countries), avg_bytes)
# Print result to console
print()
cran %>%
select(ip_id, country, package, size) %>%
print()
submit()
submit()
reset()
install.packages("reset", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =
| 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
print()
cran %>%
select() %>%
print
cran %>%
select(ip_id, country, package, size) %>%
print()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, - grade)
res
separate(data = res, col = sex_class, into = c("sex", "class"))
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit
submit()
spread()
spread
?spread
submit()
library(reaadr)
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
dataset
sat
submit()
submit()
swirl()
install.packages("yaml.load", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install(swirl)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd=2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
CorrectAnswer:
)
abline(h = 12, lwd = 2, lty
)
abline(h = 12, lwd = 2, lty)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev,cur()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mmpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library("dplyr")
swirl()
install.packages("dplyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/housingIdaho.csv", method = "curl")
housingIdaho <- read.csv("./data/housingIdaho.csv")
agricultureLogical <- housingIdaho$ACR == 3 & housingIdaho$AGS == 6
which(agricultureLogical)
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
localFileName <- "./data/jeff.jpg"
download.file(fileUrl, destfile = localFileName, method = "curl")
jpegData <- readJPEG(localFileName, native = TRUE)
quantile(jpegData,probs=c(0.3,0.8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
localFileName <- "./data/GDP.csv"
download.file(fileUrl, destfile = localFileName, method = "curl")
GDPData <- read.csv(localFileName, colClasses = "character")
GDPData$Rank <- as.numeric(GDPData$Gross.domestic.product.2012)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
localFileName <- "./data/EDSTATS_Country.csv"
download.file(fileUrl, destfile = localFileName, method = "curl")
EducationalData <- read.csv(localFileName)
mergedData <- merge(GDPData,EducationalData,by.x="X",by.y="CountryCode",all=FALSE)
library(plyr)
head(arrange(mergedData,desc(Rank)),13)
mergedData <- arrange(mergedData,desc(Rank))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
localFileName <- "./data/GDP.csv"
download.file(fileUrl, destfile = localFileName, method = "curl")
GDPData <- read.csv(localFileName, colClasses = "character")
GDPData$Rank <- as.numeric(GDPData$Gross.domestic.product.2012)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
localFileName <- "./data/EDSTATS_Country.csv"
download.file(fileUrl, destfile = localFileName, method = "curl")
EducationalData <- read.csv(localFileName)
mergedData <- merge(GDPData,EducationalData,by.x="X",by.y="CountryCode",all=FALSE)
library(plyr)
head(arrange(mergedData,desc(Rank)),13)
mergedData <- arrange(mergedData,desc(Rank))
finalTable <- mergedData[!is.na(mergedData$Rank),]
finalTable
prueba <- finalTable[is.na(finalTable$Rank),]
tapply(finalTable$Rank,finalTable$Income.Group,mean)
library(Hmisc)
finalTable$RankGroup = cut2(finalTable$Rank,g=5)
table(finalTable$RankGroup)
table(finalTable$RankGroup, finalTable$Income.Group)
library(Hmisc)
finalTable$RankGroup = cut2(finalTable$Rank,g=5)
table(finalTable$RankGroup)
table(finalTable$RankGroup, finalTable$Income.Group)
trainFeatures <- read.table("train/X_train.txt")
ourTrainFeatures <- trainFeatures[,ourFeatures]
testFeatures <- read.table("test/X_test.txt")
ourTestFeatures <- test.features[,ourFeatures]
library(Hmisc)
finalTable$RankGroup = cut2(finalTable$Rank,g=5)
table(finalTable$RankGroup)
table(finalTable$RankGroup, finalTable$Income.Group)
finalTable <- mergedData[!is.na(mergedData$Rank),]
finalTable
prueba <- finalTable[is.na(finalTable$Rank),]
tapply(finalTable$Rank,finalTable$Income.Group,mean)
getwd()
setwd("/Users/sexybaboy/Documents/Files/Zetch/Online Courses/Data Science Specialization Feb18/GitHub/ProgrammingAssignment3")
install.packages("plyr")
install.packages("plyr")
